{"version":3,"sources":["game.js","gameBoard.js","main.js","reset.js","status.js","win.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"../app.js","sourcesContent":["'use strict'\r\nlet game = {\r\n        /** \r\n         * функция вызывает проверку статуса игры\r\n         * , получает поле на котором происходит клик\r\n         * вызывает функцию написания символа и функцию проверки на выигрыш\r\n         * \r\n         */\r\n        getCellWithSymbol() {\r\n\r\n            let cellAll = document.querySelectorAll('td');\r\n            for (let i = 0; i < cellAll.length; i++) {\r\n                cellAll[i].addEventListener('click', function (event) {\r\n                        if (getVerifyStatus()) {\r\n                            game.renderSymbol(event);\r\n                            win.checkWhoWon();\r\n                        };\r\n                });\r\n            }\r\n            return;\r\n        },\r\n\r\n    \r\n    /**\r\n     * Функция получает координа активной клетки \r\n     * вызывает проверку  заполнения клетки\r\n     * вызывает функции занесения нужного символа в массив\r\n     * и вывода в таблицу\r\n     * \r\n     * @param {*} event \r\n     */\r\n    renderSymbol(event) {\r\n        let dataX = +event.target.dataset.x;\r\n        let dataY = +event.target.dataset.y;\r\n\r\n        if (this.isCellEmpty(dataX, dataY)) {\r\n            this.addInArray(dataX, dataY);\r\n            this.rederInCell(event);\r\n        }\r\n    },\r\n    /**\r\n     * функция добавляет символ в массив\r\n     * @param {} dataX \r\n     * @param {*} dataY \r\n     */\r\n    addInArray(dataX, dataY) {\r\n        let symbolInArray = this.selectionSуmbol();\r\n        data.arrayValue[dataX][dataY] = symbolInArray;\r\n    },\r\n    /**\r\n     * функция проверяет пустая ли клетка поля\r\n     * @param {} dataX \r\n     * @param {*} dataY \r\n     */\r\n    isCellEmpty(dataX, dataY) {\r\n        return data.arrayValue[dataX][dataY] === '';\r\n    },\r\n    /**\r\n     * функция выводит нужный символ в клетку игрового поля\r\n     * @param {} event \r\n     */\r\n    rederInCell(event) {\r\n        let gameCell = document.querySelectorAll('td');\r\n        event.target.innerText = `${data.symbol}`;\r\n\r\n    },\r\n    /**\r\n     * функция выбирает нужный символ\r\n     */\r\n    selectionSуmbol() {\r\n        if (data.symbol === \"O\" || data.symbol === \"\") {\r\n            data.symbol = \"X\";\r\n            return data.symbol;\r\n        } else {\r\n            data.symbol = \"O\";\r\n            return data.symbol;\r\n        };\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n};","'use strict'\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.table = document.querySelector('.game');\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * функция создает игровое поле 3 * 3\r\n     * в виде строки\r\n     * @returns{String}\r\n     */\r\n    renderGameBoard() {\r\n        let cell = '';\r\n        for (let i = 0; i < 3; i++) {\r\n            cell += \"<tr>\";\r\n            for (let j = 0; j < 3; j++) {\r\n                cell += `<td data-x=\"${i}\" data-y=\"${j}\" ></td>`;\r\n            }\r\n            cell += \"</tr>\";\r\n        }\r\n        this.addBoard(cell);\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * функция добавляет строку в таблицу\r\n     * @param {*} cell \r\n     */\r\n    addBoard(cell) {\r\n        this.table.insertAdjacentHTML(\"afterBegin\", cell);\r\n    }\r\n\r\n    \r\n\r\n\r\n}\r\n\r\n","'use strict'\r\n\r\nwindow.addEventListener('load', function () {\r\n    const gameBoard = new Board();\r\n    gameBoard.renderGameBoard();\r\n    game.getCellWithSymbol();\r\n    resetGame();\r\n   \r\n});\r\n\r\n\r\n\r\nlet data = {\r\n\r\n    status: \"game\",\r\n    symbol: '',\r\n\r\n    arrayValue: [\r\n        ['', '', ''],\r\n        ['', '', ''],\r\n        ['', '', ''],\r\n    ],\r\n/**\r\n * функция очищяет массив\r\n */\r\n    clearArray() {\r\n        for(let value of this.arrayValue) {\r\n            value.splice(0, 3, '', '', '');\r\n        }\r\n    }\r\n}","/**\r\n * функция вызывает функции очистки доски\r\n * и массива, а также при необходимости меняет \r\n * статус игры\r\n */\r\n  function resetGame() { \r\n    let button = document.querySelector('.reset');\r\n     button.addEventListener('click',function(){\r\n        clearGameBoard();\r\n        data.clearArray();\r\n        if (data.status == \"nogame\") {\r\n        win.checkStatus();\r\n    };\r\n     });\r\n     return;\r\n};\r\n\r\n\r\n/**\r\n * функция очищяет доску\r\n */\r\nfunction clearGameBoard() {\r\n    let tdAll = document.querySelectorAll('td');\r\n    tdAll.forEach(function(td) {\r\n        td.innerText = '';\r\n    });\r\n    return;\r\n};","function getVerifyStatus() {\r\n  return data.status == \"game\";\r\n};","let win = {\r\n    /**\r\n     * функция вызывает проверку выигрышной ситуации на поле\r\n     * стфтус игры и выводит кто победил\r\n     */\r\n    checkWhoWon() {\r\n        if (this.getVerifyWin()) {\r\n            this.checkStatus();\r\n            alert(`Победили ${data.symbol}`);\r\n            return;\r\n        };\r\n        return;\r\n    },\r\n/**\r\n * функция вызывает проверку возможных вариантов  выигрыша \r\n */\r\n    getVerifyWin() {\r\n        return this.isLineWon({ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }) ||\r\n                this.isLineWon({ x: 1, y: 0 }, { x: 1, y: 1 }, { x: 1, y: 2 }) ||\r\n                this.isLineWon({ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }) || \r\n\r\n                this.isLineWon({ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }) ||\r\n                this.isLineWon({ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }) ||\r\n                this.isLineWon({ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }) ||\r\n                \r\n                this.isLineWon({ x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }) ||\r\n                this.isLineWon({ x: 2, y: 0 }, { x: 1, y: 1}, { x: 0, y: 2 }); \r\n    },\r\n/**\r\n * функция проверяет есть ли выигрыш\r\n * @param {*} a \r\n * @param {*} b \r\n * @param {*} c \r\n */\r\n    isLineWon(a, b, c) {\r\n        let value = data.arrayValue[a.y][a.x] + data.arrayValue[b.y][b.x] + data.arrayValue[c.y][c.x];\r\n        return value === \"XXX\" || value === \"OOO\";\r\n    },\r\n\r\n    /**\r\n     * функция проверяет и меняет статус игры\r\n     */\r\n    checkStatus() {\r\n        if (data.status == \"game\") {\r\n            data.status = \"nogame\";\r\n        } else {\r\n            data.status = \"game\";\r\n        };\r\n\r\n    },\r\n\r\n};"]}